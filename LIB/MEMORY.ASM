; ================================================================
; 内存相关操作,使用NASM的16位汇编完成
; 完成功能：
;     memcpy
; ================================================================

%ifndef lib_memory
%define lib_memory

; ================================================================
; 调用宏定义
; 所有函数都使用对应的宏定义来调用
; ================================================================

; ---------------------------------------
; 宏说明：
;   内存拷贝
; 使用方法：
;    memcpy    src, dst, len, 返回值
; ---------------------------------------
%macro  memcpy  4.nolist       
    smallcall proc_memcpy, %4, {%1,%2,%3}
%endmacro 

; ================================================================
; 调用函数
; 实际完成功能的函数，尽量不要直接使用函数，而是使用对应的宏定义
; ================================================================
section lib_string_section
; ---------------------------------------
; 函数说明：
;   内存拷贝
; 使用方法：
;    使用宏定义 memcpy
; ---------------------------------------
proc_memcpy:
    ; 函数的一些相关定义
    %push disk_io_context         ; 上下文压栈            
    %stacksize large              ; 设置使用bp寄存器来寻址        
    %arg src:word, des:word, len:word, rv:word    ; 定义参数

    ; 函数体正式开始
    enter       0,    0   ; 确保堆栈平衡，以及开辟空间   
    multipush   ax,cx,bx,ds,si            ; 保存原始寄存器值 

    ; 准备拷贝字符串
    mov si, [src]
    mov di, [des]
    mov cx, [len]

    repz movsb
    mov ax, 0
    mov [rv], ax
    jmp .end

.end:
    multipop   ax,cx,bx,ds,si               ; 恢复原始寄存器值
    leave                                   ; 恢复堆栈

    ret
    %pop                        ; 上下文出栈
%endif