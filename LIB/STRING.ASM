; ================================================================
; 字符串相关功能, 使用NASM的16位汇编完成
; 完成功能：
;     defstring, strcmp
; ================================================================

%ifndef lib_string
%define lib_string

; ================================================================
; 调用宏定义
; 所有函数都使用对应的宏定义来调用
; ================================================================

; ---------------------------------------
; 宏说明：
;   简化字符串的定义，一般用在 data 段中
; 使用方法：
;    defstring    字符串名称, 字符串长度的名称，字符串内容
; ---------------------------------------
%macro  defstring 3.nolist       
    ;
    %1: db %3         ; 定义文字的内存
    %2 equ $-%1       ; 计算文字长度
    ;             
%endmacro 

; ---------------------------------------
; 宏说明：
;   字符串比较
; 使用方法：
;    strstr    字符串名称1, 字符串1长度, 字符串名称2， 字符串2长度, 返回值存储寄存器
;    返回值     0 表示一致   其他表示不一致
; ---------------------------------------
%macro  strcmp  5 ;.nolist       
    smallcall proc_strcmp, %5, {%1,%2,%3,%4}
%endmacro 

; ================================================================
; 调用函数
; 实际完成功能的函数，尽量不要直接使用函数，而是使用对应的宏定义
; ================================================================
section lib_string_section
; ---------------------------------------
; 函数说明：
;   字符串比较
; 使用方法：
;    strstr    字符串名称1, 字符串1长度, 字符串名称2， 字符串2长度, 返回值存储寄存器
;    返回值     0 表示一致   其他表示不一致
; ---------------------------------------
proc_strcmp:
    ; 函数的一些相关定义
    %push disk_io_context         ; 上下文压栈            
    %stacksize large              ; 设置使用bp寄存器来寻址        
    %assign %$localsize 16 
    %arg src:word, srclen:word, des:word, deslen:word, rv:word    ; 定义参数

    ; 函数体正式开始
    enter       16,    0   ; 确保堆栈平衡，以及开辟空间   
    multipush   ax,cx,bx,ds,si            ; 保存原始寄存器值 

    ; 先比较字符串长度
    mov ax, [srclen]
    sub ax, [deslen]
    jnz  .noequal

    ; 长度相等开始比较字符串
.lenequal:


    mov si, [src]
    mov di, [des]
    mov cx, [srclen]

    repz cmpsb
    ; 标志寄存器不等于0 表示两个字符不相等
    jnz .noequal

    ; 判断了标志寄存器在判断cx 是不是0
    sub cx, 0
    jnz .noequal

    ; 到此基本认为是相等了
    jmp .equal

    ; 不相等
.noequal:
    mov ax, 1
    mov [rv], ax
    jmp .end

    ; 不等
.equal:
     mov ax, 0
    mov [rv], ax
    jmp .end

.end:
    multipop   ax,cx,bx,ds,si               ; 恢复原始寄存器值
    leave                                   ; 恢复堆栈

    ret
    %pop                        ; 上下文出栈
%endif