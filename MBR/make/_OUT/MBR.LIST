     1                                  ; ================================================================
     2                                  ; 这是运行在裸机上的MBR代码，NASM的16位汇编完成
     3                                  ; 内存加载地址：07c00h 
     4                                  ; 完成功能：
     5                                  ;     加载 1号扇区开始的20个扇区的代码至内存地址，并将运行权利叫个它
     6                                  ; ================================================================
     7                                  
     8                                  %include "COMMON.ASM"
     1                              <1> ; ================================================================
     2                              <1> ; 通用功能的相关宏定义,使用NASM的16位汇编完成
     3                              <1> ; 完成功能：
     4                              <1> ;     通用功能的
     5                              <1> ; ================================================================
     6                              <1> 
     7                              <1> %ifndef lib_common
     8                              <1> %define lib_common
     9                              <1> 
    10                              <1> ; ---------------------------------------
    11                              <1> ; 宏说明：
    12                              <1> ;   初始化段寄存器
    13                              <1> ; 使用方法：
    14                              <1> ;   intseg  DS,ES
    15                              <1> ; ---------------------------------------
    16                              <1> %macro intseg 2
    17                              <1>     push ax
    18                              <1>     mov ax, %1           
    19                              <1>     mov ds, ax   
    20                              <1>     mov ax, %2           
    21                              <1>     mov es, ax
    22                              <1>     pop ax
    23                              <1> %endmacro 
    24                              <1> 
    25                              <1> ; ---------------------------------------
    26                              <1> ; 宏说明：
    27                              <1> ;   将指定的一些列寄存器压栈
    28                              <1> ; 使用方法：
    29                              <1> ;   multipush    ax,bx,cs,ds,.....
    30                              <1> ; ---------------------------------------
    31                              <1> %macro  multipush 1-*.nolist
    32                              <1> %rep  %0                
    33                              <1>     push    %1          
    34                              <1>     %rotate 1          
    35                              <1> %endrep              
    36                              <1> %endmacro 
    37                              <1> 
    38                              <1> ; ---------------------------------------
    39                              <1> ; 宏说明：
    40                              <1> ;   将指定的一些列寄存器出栈
    41                              <1> ; 使用方法：
    42                              <1> ;   multipop    ax,bx,cs,ds,.....
    43                              <1> ; 其它说明：
    44                              <1> ;   寄存器顺序与使用 multipush 的时候需保持一致
    45                              <1> ; ---------------------------------------
    46                              <1> %macro  multipop 1-*.nolist
    47                              <1> %rep %0          
    48                              <1>     %rotate -1               
    49                              <1>     pop     %1          
    50                              <1> %endrep               
    51                              <1> %endmacro 
    52                              <1> 
    53                              <1> ; ---------------------------------------
    54                              <1> ; 宏说明：
    55                              <1> ;   简化调用时候的传参，此宏定义必须 与 callbackpop 搭配使用
    56                              <1> ; 使用方法：
    57                              <1> ;   call    参数1, 参数2，...
    58                              <1> ; ---------------------------------------
    59                              <1> %macro  callpush 1-*;.nolist
    60                              <1> %push   callcontext
    61                              <1> %assign %$localsize %0
    62                              <1> push 0
    63                              <1> %rep %0          
    64                              <1>     %rotate -1
    65                              <1>     push    %1          
    66                              <1> %endrep       
    67                              <1> %endmacro 
    68                              <1> 
    69                              <1> ; ---------------------------------------
    70                              <1> ; 宏说明：
    71                              <1> ;   简化调用时候的传参，此宏定义必须 与 callpush 搭配使用
    72                              <1> ; 使用方法：
    73                              <1> ;   call    返回值
    74                              <1> ; ---------------------------------------
    75                              <1> %macro  callbackpop 1
    76                              <1> mov %1, ax
    77                              <1> %rep %$localsize          
    78                              <1>     pop ax
    79                              <1> %endrep
    80                              <1> mov ax,%1
    81                              <1> pop %1
    82                              <1> %pop
    83                              <1> %endmacro 
    84                              <1> 
    85                              <1> ; ---------------------------------------
    86                              <1> ; 宏说明：
    87                              <1> ;   封装了 callpush 和  callbackpop 的调用，之后再也不用管参数的压栈顺序了
    88                              <1> ; 使用方法：
    89                              <1> ;   call    要调用的函数, 返回值存储地址，{参数1, 参数2, 参数3}
    90                              <1> ; ---------------------------------------
    91                              <1> %macro smallcall 3
    92                              <1> callpush %3
    93                              <1> call %1
    94                              <1> callbackpop %2
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> ; ---------------------------------------
    98                              <1> ; 宏说明：
    99                              <1> ;   将指定的段的段地址保存到指定寄存器中
   100                              <1> ; 使用方法：
   101                              <1> ;    myseg    段寄存器, 段名称
   102                              <1> ; ---------------------------------------
   103                              <1> %macro  myseg 2.nolist         
   104                              <1>     multipush   ax
   105                              <1>     ;
   106                              <1>     mov ax, section.%2.start
   107                              <1>     mov %1,ax
   108                              <1>     ;
   109                              <1>     multipop    ax             
   110                              <1> %endmacro 
   111                              <1> 
   112                              <1> 
   113                              <1> ; ---------------------------------------
   114                              <1> ; 宏说明：
   115                              <1> ;   将指定值复制到指定内存中, 安全函数，不会改变借用的寄存器的值
   116                              <1> ; 使用方法：
   117                              <1> ;    memset    借用的寄存器, 内存地址, 值
   118                              <1> ; ---------------------------------------
   119                              <1> %macro  memset 3.nolist         
   120                              <1>     multipush   %1
   121                              <1>     ;
   122                              <1>     mov %1, %3
   123                              <1>     mov %2,%1
   124                              <1>     ;
   125                              <1>     multipop    %1             
   126                              <1> %endmacro 
   127                              <1> 
   128                              <1> ; ---------------------------------------
   129                              <1> ; 宏说明：
   130                              <1> ;   将指定值复制到指定内存中, 与memset的不同是，不安全函数，会改变借用的寄存器的值
   131                              <1> ; 使用方法：
   132                              <1> ;    memset_byax    借用的寄存器, 内存地址, 值
   133                              <1> ; ---------------------------------------
   134                              <1> %macro  memset_unsafe 3.nolist         
   135                              <1>     ;
   136                              <1>     mov %1, %3
   137                              <1>     mov %2, %1
   138                              <1>     ;          
   139                              <1> %endmacro 
   140                              <1> 
   141                              <1> %endif
     9                                  %include "DISK.ASM"
     1                              <1> ; ================================================================
     2                              <1> ; 这是关于磁盘操作的相关宏定义,使用NASM的16位汇编完成
     3                              <1> ; 完成功能：
     4                              <1> ;     磁盘的读写操作
     5                              <1> ; ================================================================
     6                              <1> %ifndef lib_disk
     7                              <1> %define lib_disk
     8                              <1> %include "COMMON.ASM"
     1                              <2> ; ================================================================
     2                              <2> ; 通用功能的相关宏定义,使用NASM的16位汇编完成
     3                              <2> ; 完成功能：
     4                              <2> ;     通用功能的
     5                              <2> ; ================================================================
     6                              <2> 
     7                              <2> %ifndef lib_common
     8                              <2> %define lib_common
     9                              <2> 
    10                              <2> ; ---------------------------------------
    11                              <2> ; 宏说明：
    12                              <2> ;   初始化段寄存器
    13                              <2> ; 使用方法：
    14                              <2> ;   intseg  DS,ES
    15                              <2> ; ---------------------------------------
    16                              <2> %macro intseg 2
    17                              <2>     push ax
    18                              <2>     mov ax, %1           
    19                              <2>     mov ds, ax   
    20                              <2>     mov ax, %2           
    21                              <2>     mov es, ax
    22                              <2>     pop ax
    23                              <2> %endmacro 
    24                              <2> 
    25                              <2> ; ---------------------------------------
    26                              <2> ; 宏说明：
    27                              <2> ;   将指定的一些列寄存器压栈
    28                              <2> ; 使用方法：
    29                              <2> ;   multipush    ax,bx,cs,ds,.....
    30                              <2> ; ---------------------------------------
    31                              <2> %macro  multipush 1-*.nolist
    32                              <2> %rep  %0                
    33                              <2>     push    %1          
    34                              <2>     %rotate 1          
    35                              <2> %endrep              
    36                              <2> %endmacro 
    37                              <2> 
    38                              <2> ; ---------------------------------------
    39                              <2> ; 宏说明：
    40                              <2> ;   将指定的一些列寄存器出栈
    41                              <2> ; 使用方法：
    42                              <2> ;   multipop    ax,bx,cs,ds,.....
    43                              <2> ; 其它说明：
    44                              <2> ;   寄存器顺序与使用 multipush 的时候需保持一致
    45                              <2> ; ---------------------------------------
    46                              <2> %macro  multipop 1-*.nolist
    47                              <2> %rep %0          
    48                              <2>     %rotate -1               
    49                              <2>     pop     %1          
    50                              <2> %endrep               
    51                              <2> %endmacro 
    52                              <2> 
    53                              <2> ; ---------------------------------------
    54                              <2> ; 宏说明：
    55                              <2> ;   简化调用时候的传参，此宏定义必须 与 callbackpop 搭配使用
    56                              <2> ; 使用方法：
    57                              <2> ;   call    参数1, 参数2，...
    58                              <2> ; ---------------------------------------
    59                              <2> %macro  callpush 1-*;.nolist
    60                              <2> %push   callcontext
    61                              <2> %assign %$localsize %0
    62                              <2> push 0
    63                              <2> %rep %0          
    64                              <2>     %rotate -1
    65                              <2>     push    %1          
    66                              <2> %endrep       
    67                              <2> %endmacro 
    68                              <2> 
    69                              <2> ; ---------------------------------------
    70                              <2> ; 宏说明：
    71                              <2> ;   简化调用时候的传参，此宏定义必须 与 callpush 搭配使用
    72                              <2> ; 使用方法：
    73                              <2> ;   call    返回值
    74                              <2> ; ---------------------------------------
    75                              <2> %macro  callbackpop 1
    76                              <2> mov %1, ax
    77                              <2> %rep %$localsize          
    78                              <2>     pop ax
    79                              <2> %endrep
    80                              <2> mov ax,%1
    81                              <2> pop %1
    82                              <2> %pop
    83                              <2> %endmacro 
    84                              <2> 
    85                              <2> ; ---------------------------------------
    86                              <2> ; 宏说明：
    87                              <2> ;   封装了 callpush 和  callbackpop 的调用，之后再也不用管参数的压栈顺序了
    88                              <2> ; 使用方法：
    89                              <2> ;   call    要调用的函数, 返回值存储地址，{参数1, 参数2, 参数3}
    90                              <2> ; ---------------------------------------
    91                              <2> %macro smallcall 3
    92                              <2> callpush %3
    93                              <2> call %1
    94                              <2> callbackpop %2
    95                              <2> %endmacro
    96                              <2> 
    97                              <2> ; ---------------------------------------
    98                              <2> ; 宏说明：
    99                              <2> ;   将指定的段的段地址保存到指定寄存器中
   100                              <2> ; 使用方法：
   101                              <2> ;    myseg    段寄存器, 段名称
   102                              <2> ; ---------------------------------------
   103                              <2> %macro  myseg 2.nolist         
   104                              <2>     multipush   ax
   105                              <2>     ;
   106                              <2>     mov ax, section.%2.start
   107                              <2>     mov %1,ax
   108                              <2>     ;
   109                              <2>     multipop    ax             
   110                              <2> %endmacro 
   111                              <2> 
   112                              <2> 
   113                              <2> ; ---------------------------------------
   114                              <2> ; 宏说明：
   115                              <2> ;   将指定值复制到指定内存中, 安全函数，不会改变借用的寄存器的值
   116                              <2> ; 使用方法：
   117                              <2> ;    memset    借用的寄存器, 内存地址, 值
   118                              <2> ; ---------------------------------------
   119                              <2> %macro  memset 3.nolist         
   120                              <2>     multipush   %1
   121                              <2>     ;
   122                              <2>     mov %1, %3
   123                              <2>     mov %2,%1
   124                              <2>     ;
   125                              <2>     multipop    %1             
   126                              <2> %endmacro 
   127                              <2> 
   128                              <2> ; ---------------------------------------
   129                              <2> ; 宏说明：
   130                              <2> ;   将指定值复制到指定内存中, 与memset的不同是，不安全函数，会改变借用的寄存器的值
   131                              <2> ; 使用方法：
   132                              <2> ;    memset_byax    借用的寄存器, 内存地址, 值
   133                              <2> ; ---------------------------------------
   134                              <2> %macro  memset_unsafe 3.nolist         
   135                              <2>     ;
   136                              <2>     mov %1, %3
   137                              <2>     mov %2, %1
   138                              <2>     ;          
   139                              <2> %endmacro 
   140                              <2> 
   141                              <2> %endif
     9                              <1> 
    10                              <1> ; ================================================================
    11                              <1> ; 调用宏定义
    12                              <1> ; 所有函数都使用对应的宏定义来调用
    13                              <1> ; ================================================================
    14                              <1> 
    15                              <1>     ; ---------------------------------------
    16                              <1>     ; 宏说明：
    17                              <1>     ;   封装了对磁盘读写的调用，实际使用的是函数disk_io
    18                              <1>     ; 使用方法：
    19                              <1>     ;   disk_io  磁盘起始扇区, 扇区数, 内存地址, 读(42h)/写(43h), 返回值
    20                              <1>     ;   
    21                              <1>     ; ---------------------------------------
    22                              <1> %macro  disk_io 5.nolist
    23                              <1>     push strict word 0      ; 返回值 
    24                              <1>     push strict word %4     ; 读(42h)/写(43h) opertation
    25                              <1>     push strict word %3     ; 内存地址 memaddr
    26                              <1>     push strict word %2     ; 扇区数 count
    27                              <1>     push strict word %1     ; 磁盘起始扇区 offset     
    28                              <1>     call proc_disk_io
    29                              <1>     mov %5, ax
    30                              <1>     pop ax
    31                              <1>     pop ax
    32                              <1>     pop ax
    33                              <1>     pop ax
    34                              <1>     mov ax, %5
    35                              <1>     pop %5
    36                              <1> %endmacro 
    37                              <1> 
    38                              <1> ; ================================================================
    39                              <1> ; 调用函数
    40                              <1> ; 实际完成功能的函数，尽量不要直接使用函数，而是使用对应的宏定义
    41                              <1> ; ================================================================
    42                              <1> 
    43                              <1> ; 定义自己的段
    44                              <1> section lib_disk_section
    45                              <1> 
    46                              <1> struc disk_io_param_context
    47 00000000 <res 00000001>      <1>     .PacketSize  resb    1;  数据包尺寸(16字节)
    48 00000001 <res 00000001>      <1>     .Reserved    resb    1;  ==0
    49 00000002 <res 00000002>      <1>     .BlockCount  resw    1; // 要传输的数据块个数(以扇区为单位)
    50 00000004 <res 00000002>      <1>     .BufferAddr1 resw    1; // 传输缓冲地址 segment
    51 00000006 <res 00000002>      <1>     .BufferAddr2 resw    1; // 传输缓冲地址 offset 
    52 00000008 <res 00000002>      <1>     .BlockNum1  resw     1; // 磁盘起始绝对块地址
    53 0000000A <res 00000002>      <1>     .BlockNum2  resw     1; // 磁盘起始绝对块地址
    54 0000000C <res 00000002>      <1>     .BlockNum3  resw     1; // 磁盘起始绝对块地址
    55 0000000E <res 00000002>      <1>     .BlockNum4  resw     1; // 磁盘起始绝对块地址 
    56                              <1> endstruc
    57                              <1> 
    58                              <1>     ; ---------------------------------------
    59                              <1>     ; 函数说明：
    60                              <1>     ;   磁盘读写的封装函数
    61                              <1>     ; 使用方法：
    62                              <1>     ;   使用宏定义, disk_io 
    63                              <1>     ; ---------------------------------------
    64                              <1> proc_disk_io:
    65                              <1>     ; 函数的一些相关定义
    66                              <1>     %push disk_io_context         ; 上下文压栈            
    67                              <1>     %stacksize large              ; 设置使用bp寄存器来寻址        
    68                              <1>     %assign %$localsize 16 
    69                              <1>     %arg offset:word, count:word, memaddr:word, opertation:word, rv:word    ; 定义参数
    70                              <1>     %local a1:qword, param:qword
    71                              <1> 
    72                              <1>     ; 函数体正式开始
    73 00000000 C8100000            <1>     enter       16,    0   ; 确保堆栈平衡，以及开辟空间   
    74 00000004 5051531E56          <1>     multipush   ax,cx,bx,ds,si            ; 保存原始寄存器值 
    75                              <1>     
    76 00000009 B0108846F0          <1>     memset_unsafe al, [param + disk_io_param_context.PacketSize], 16            ; 给PacketSize 赋值16
    77 0000000E B0008846F1          <1>     memset_unsafe al, [param + disk_io_param_context.Reserved], 0               ; 给Reserved 设置为0
    78 00000013 8B46068946F2        <1>     memset_unsafe ax, [param + disk_io_param_context.BlockCount], [count]       ; 设置去取的扇区数量
    79 00000019 8B46088946F4        <1>     memset_unsafe ax, [param + disk_io_param_context.BufferAddr1], [memaddr]    ; 内存段地址
    80 0000001F B800008946F6        <1>     memset_unsafe ax, [param + disk_io_param_context.BufferAddr2], 0            ; 内存偏移地址
    81 00000025 8B46048946F8        <1>     memset_unsafe ax, [param + disk_io_param_context.BlockNum1], [offset]       ; 磁盘地址
    82 0000002B B800008946FA        <1>     memset_unsafe ax, [param + disk_io_param_context.BlockNum2], 0              ; 磁盘地址
    83 00000031 B800008946FC        <1>     memset_unsafe ax, [param + disk_io_param_context.BlockNum3], 0              ; 磁盘地址
    84 00000037 B800008946FE        <1>     memset_unsafe ax, [param + disk_io_param_context.BlockNum4], 0             ; 磁盘地址
    85                              <1> 
    86                              <1>     ; ds:si是磁盘本参数的地址
    87 0000003D B80000              <1>     mov ax, 0
    88 00000040 8ED8                <1>     mov ds, ax
    89 00000042 89E8                <1>     mov ax, bp
    90 00000044 83E810              <1>     sub ax, 16
    91 00000047 89C6                <1>     mov si, ax
    92 00000049 8A660A              <1>     mov ah, [opertation]
    93 0000004C B280                <1>     mov dl, 80h
    94 0000004E CD13                <1>     int 13h
    95 00000050 88E0                <1>     mov al,ah
    96 00000052 B400                <1>     mov ah,0
    97 00000054 89460C              <1>     mov [rv], ax
    98                              <1> 
    99 00000057 5E1F5B5958          <1>     multipop   ax,cx,bx,ds,si               ; 恢复原始寄存器值
   100 0000005C C9                  <1>     leave                                   ; 恢复堆栈
   101                              <1> 
   102 0000005D C3                  <1>     ret
   103                              <1>     %pop                        ; 上下文出栈
   104                              <1> 
   105                              <1> 
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> %endif
   112                              <1> 
    10                                  
    11                                  org 07c00h                     ; 指示编译器 程序加载的位置
    12                                  
    13                                  projramloadadd equ 07f00h
    14                                  
    15                                  section .data
    16                                       ; 出错字符
    17 00000000 426F6F74204572726F-          strfailed: db  "Boot Error"
    17 00000009 72                 
    18                                       strfailedlen equ $-strfailed
    19                                  
    20                                  section .text
    21                                       intseg 0, 0
    21 00000000 50                  <1>  push ax
    21 00000001 B80000              <1>  mov ax, %1
    21 00000004 8ED8                <1>  mov ds, ax
    21 00000006 B80000              <1>  mov ax, %2
    21 00000009 8EC0                <1>  mov es, ax
    21 0000000B 58                  <1>  pop ax
    22                                       ; 读取磁盘
    23 0000000C 68000068420068007F-          disk_io   2, 14h, projramloadadd, 42h, ax
    23 00000015 681400680200E8-    
    23 0000001C (0000)89C058585858-
    23 00000024 89C058             
    24                                       ; 判断大小
    25 00000027 83F800                       cmp ax, 0
    26 0000002A 7503                         jne error
    27 0000002C E9(007F)                     jmp projramloadadd
    28                                  
    29                                  error:
    30 0000002F B90A00                       mov cx, strfailedlen               ; CX = 串长度
    31 00000032 BB0F00                       mov bx, 000fh                      ; 页号为0(BH = 0) 黑底白字(BL = 0Fh,高亮)
    32 00000035 BA0000                       mov dx, 0                          ; 列
    33 00000038 B8[0000]                     mov ax, strfailed
    34 0000003B 55                           push bp
    35 0000003C 89C5                         mov bp, ax                         ; ES:BP = 串地址
    36 0000003E B80113                       mov ax, 01301h                     ; AH = 13, AL = 01h
    37 00000041 CD10                         int 10h ; 10h 号中断
    38 00000043 5D                           pop bp
    39 00000044 EBFE                         jmp $ ; 无限循环
    40                                  
